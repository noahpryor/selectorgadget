{
  "name": "gulp-build",
  "version": "0.5.3",
  "description": "Build files for different environments by swapping in variables",
  "homepage": "https://github.com/tjeastmond/gulp-build",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "author": {
    "name": "TJ Eastmond",
    "email": "tj.eastmond@gmail.com",
    "url": "http://tjeastmond.com"
  },
  "contributors": [
    {
      "name": "Chris Mendis",
      "email": "chris.mendis@gmail.com",
      "url": "https://github.com/chrismendis"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tjeastmond/gulp-build.git"
  },
  "keywords": [
    "underscore",
    "gulpplugin",
    "build",
    "handlebars",
    "partials",
    "gulp"
  ],
  "license": "MIT",
  "dependencies": {
    "through2": "~0.4.1",
    "underscore": "~1.5.2",
    "handlebars": "2.0.0-alpha.2"
  },
  "devDependencies": {
    "gulp": "~3.5.6",
    "gulp-util": "~2.2.14",
    "mocha": "~1.15.1",
    "should": "~2.1.1",
    "gulp-jshint": "~1.5.3",
    "jshint-stylish": "~0.1.5",
    "gulp-mocha": "~0.4.1"
  },
  "readme": "# gulp-build\n\nGulp 3 plugin for building out files for deployment. Good for swapping environmental variables like Google Analytics IDs, or just compiling static HTML files.\n\n`gulp-build` uses HandleBars for templates, and supports helpers, partials, and layouts.\n\n**Version `0.5.0` was a big update. I moved away from using Underscore templates, and have added support for partials and layouts. Both partials and layouts must be passed in as strings, but a future update will bring support for file glob'ing.**\n\n## Install\n\n```shell\nnpm install --save-dev gulp-build\n```\n\n## Usage\n\nBasic usage:\n\n```javascript\nvar build = require('gulp-build');\n\ngulp.task('build', function() {\n  gulp.src('scripts/*.js')\n      .pipe(build({ GA_ID: '123456' }))\n      .pipe(gulp.dest('dist'))\n});\n```\n\nWith helpers:\n\n```javascript\nvar build = require('gulp-build');\n\nvar options = {\n  helpers: [{\n    name: 'addition',\n    fn: function(a, b) { return a + b; }\n  }]\n};\n\ngulp.task('build', function() {\n  gulp.src('pages/*.html')\n      .pipe(build({ title: 'Some page' }, options))\n      .pipe(gulp.dest('dist'))\n});\n\n```\n\nHelpers are regular Handlebars helpers or block helpers that your layout, partials, and templates can call.\n\nFor more information on Handlebars helpers, see http://handlebarsjs.com/#helpers and http://handlebarsjs.com/block_helpers.html.\n\nWith partials and a layout:\n\n```javascript\nvar build = require('gulp-build');\n\nvar options = {\n\tpartials: [{\n\t\tname: 'footer',\n\t\ttpl: '<p>Copyright 2013</p>'\n\t}],\n\tlayout: '<html><body>{{> body}}</body></html>'\n};\n\ngulp.task('build', function() {\n  gulp.src('pages/*.html')\n      .pipe(build({ title: 'Some page' }, options))\n      .pipe(gulp.dest('dist'))\n});\n\n```\n\nIf your templates want to render partials, you just reference them as: `{{> partialName}}`.\n\nIf you use a layout, you need the `{{> body}}` tag for the plugin to know where to place your content. If you omit it, your compiled file will be missing the main content!\n\n## API\n\n### gulp-build(data, config)\n\n#### data\nTemplates vars passed down to `HandleBars` for compiling\n\n#### config.layout\nType: `String`<br />\nDefault: null\n\n#### config.partials\nType: `Array` containing `Objects`<br />\nDefault: []\n\nA config object with partials would look like:\n\n```javascript\nvar options = {\n  partials: [\n    { name: 'footer', tpl: '<p>Copyright 2014</p>' },\n    { name: 'header', tpl: '<h1>The Header!</h1>' }\n  ]\n};\n```\n\nYour template could use those partials by using: `{{> footer}}` or `{{> header}}`\n\n## Contributing\n\nI'd like to see other template frameworks get integrated. Frameworks like: `ejs`, `Hogan` and `Mustache` but I might not have time to get to these soon.\n\nIf you'd like to help out, just submit a pull request. Before submitting though, be sure to:\n\n* Update the README\n* Write new tests\n* Ensure previous tests don't break\n* Ensure `jshint` doesn't fail\n* Follow code layout/style\n\nYou can run tests and `jshint` with:\n\n```shell\ngulp lint\ngulp test\n```\n\nThe default `gulp` task will run both of those.\n\n## Testing\n\nOpen a terminal in the directory containing `gulp-build` and then:\n\n```shell\nnpm install\ngulp\n```\n\n## The License (MIT)\nCopyright (c) 2014 TJ Eastmond\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tjeastmond/gulp-build/issues"
  },
  "_id": "gulp-build@0.5.3",
  "dist": {
    "shasum": "588ed219687f97b0a57ed0f8e3b4007a076a18c9"
  },
  "_from": "gulp-build@",
  "_resolved": "https://registry.npmjs.org/gulp-build/-/gulp-build-0.5.3.tgz"
}
